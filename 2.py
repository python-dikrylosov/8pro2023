# -*- coding: utf-8 -*-
import time
import pandas as pd
import password
from binance.client import Client
#from aiogram.dispatcher import Dispatcher
import telebot
from telebot import types
TOKEN = "5423197672:AAFPPlk1OgEomXa_F0kXclBdeLX7G_-zhaI"
# –ê–¥—Ä–µ—Å —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª–∞, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @
# user_id = message.from_user.id
# user_first_name = message.from_user.first_name
# user_last_name = message.from_user.last_name
# user_username = message.from_user.username

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN)
#dp = Dispatcher(bot)
CHANNEL_NAME = '-609825876'
# –ö–æ–º–∞–Ω–¥–∞ start

def menu1():
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–≤–µ –∫–Ω–æ–ø–∫–∏
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    itemnp = types.KeyboardButton("–ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å")
    item1 = types.KeyboardButton("—É—Ä–æ–∫ 1")
    item2 = types.KeyboardButton("—É—Ä–æ–∫ 2")
    item3 = types.KeyboardButton("–∫–æ–¥")
    item4 = types.KeyboardButton("—Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞")

    markup.add(itemnp)
    markup.add(item1,item2)
    markup.add(item3,item4)
    bot.send_message(CHANNEL_NAME, 'ü¶æ –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å üëÅ', reply_markup=markup)

def menu2():
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–≤–µ –∫–Ω–æ–ø–∫–∏
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    itemnp = types.KeyboardButton("–ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å")
    itemsp = types.KeyboardButton("–°–∏–Ω—Ç–∞–∫—Å–∏—Å python")
    itemii = types.KeyboardButton("—á—Ç–æ —Ç–∞–∫–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç")
    itemml = types.KeyboardButton("—á—Ç–æ —Ç–∞–∫–æ–µ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ")
    itemgl = types.KeyboardButton("—á—Ç–æ —Ç–∞–∫–æ–µ –≥–ª—É–±–æ–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ")
    itemnd = types.KeyboardButton("—á—Ç–æ —Ç–∞–∫–æ–µ –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö")
    itemds = types.KeyboardButton("—á—Ç–æ —Ç–∞–∫–æ–µ –¥–∞—Ç–∞—Å–µ—Ç")
    itemns = types.KeyboardButton("—á—Ç–æ —Ç–∞–∫–æ–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏")

    itemir = types.KeyboardButton("–∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≤–∏—Ç–∏—è")
    itemssml = types.KeyboardButton("—Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ñ–µ—Ä—ã –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è")
    itemspr = types.KeyboardButton("—Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã")

    markup.add(itemsp)
    markup.add(itemnp)
    markup.add(itemii)
    markup.add(itemml,itemgl)
    markup.add(itemnd, itemds)
    markup.add(itemns)
    markup.add(itemir, itemssml)
    markup.add(itemspr)

    bot.send_message(CHANNEL_NAME, '–£—Ä–æ–∫ 1', reply_markup=markup)
@bot.message_handler(commands=["start"])
def start(m, res=False):
        menu1()

        print([m.from_user.id, m.text])
# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —é–∑–µ—Ä–∞
@bot.message_handler(content_types=["text"])
def handle_text(message):
    data_log = open("log.txt", "a")
    data_log.write(str(time.strftime("%y-%m-%d %H:%M:%S")))
    data_log.write(",")

    data_log.write(str(message.from_user.id))
    data_log.write(",")

    data_log.write(str(message.text))
    data_log.write(",")

    data_log.write("\n")
    data_log.close()
    # –ï—Å–ª–∏ —é–∑–µ—Ä –ø—Ä–∏—Å–ª–∞–ª 1, –≤—ã–¥–∞–µ–º –µ–º—É —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç
    if message.text.strip() == '–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–æ–≤' :

        client = Client(password.api_key, password.api_secret)
        # info = client.get_symbol_info('AXSBTC')
        # print(info)
        prices = client.get_all_tickers()
        data_prices = pd.DataFrame(prices)
        print(data_prices.shape[0])
        for i in range(data_prices.shape[0]):
            time.sleep(2)
            price = prices[i]
            print([i, price['symbol'], price['price']])
            answer = str(i) + " " + str(price['symbol']) + " " + str(price['price'])
            bot.send_message(CHANNEL_NAME, answer)
            print([message.from_user.id,message.text])
    # –ï—Å–ª–∏ —é–∑–µ—Ä –ø—Ä–∏—Å–ª–∞–ª 2, –≤—ã–¥–∞–µ–º —É–º–Ω—É—é –º—ã—Å–ª—å

    elif message.text.strip() == '—É—Ä–æ–∫ 1':
        menu2()
        text_ans = "–í —ç—Ç–æ–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—É—Ä–æ–∫–µ –≤—ã —É–∑–Ω–∞–µ—Ç–µ: \n" \
                   " - —á—Ç–æ —Ç–∞–∫–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç \n" \
                   " - —á—Ç–æ —Ç–∞–∫–æ–µ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ, –≥–ª—É–±–æ–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ, –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –¥–∞—Ç–∞—Å–µ—Ç, –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ \n" \
                   " - –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≤–∏—Ç–∏—è –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ñ–µ—Ä—ã –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è \n" \
                   " - —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –Ω–æ–≤–æ—Å—Ç–µ–π –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –Ω–∞—Ä–∞–±–æ—Ç–æ–∫ \n\n" \
                   " –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—á–Ω–∏–∫–µ (—à—Ç—É–∫–∞) –±—É–¥—É –¥–æ–ø–∏—Å—ã–≤–∞—Ç—å"

        bot.send_message(CHANNEL_NAME, text_ans)
        print([message.from_user.id, message.text])

    elif message.text.strip() == '–ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å':
        text_ans = "–ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å"
        menu1()
        #bot.send_message(CHANNEL_NAME, text_ans)
        print([message.from_user.id, message.text])

    elif message.text.strip() == '–°–∏–Ω—Ç–∞–∫—Å–∏—Å python':
        for i in range(100):
            a = "import os \n" + str(i)
            text_ans = "–°–∏–Ω—Ç–∞–∫—Å–∏—Å python : " + a
            menu2()
            bot.send_message(CHANNEL_NAME, text_ans)
            print([message.from_user.id, message.text])

    elif message.text.strip() == '—Ç–∞–π–º–µ—Ä':
        for i in range(1):
            time.sleep(1)
            text_ans = str(time.strftime("%y-%m-%d %H:%M:%S"))
            #menu1()
            bot.send_message(CHANNEL_NAME, text_ans)
            print([message.from_user.id, message.text])

    elif message.text.strip() == '–∫–æ–¥':
            answer = "import telebot \n" \
                     "from telebot import types \n" \
                     "TOKEN = '...' \n" \
                     "bot = telebot.TeleBot(TOKEN) \n" \
                     "CHANNEL_NAME = '-609825876' \n" \
                     "@bot.message_handler(commands=['start']) \n" \
                     "def start(m, res=False): \n" \
                     "      bot.send_message(CHANNEL_NAME, '–ù–∞–∂–º–∏:') \n" \
                     "@bot.message_handler(content_types=['text']) \n" \
                     "def handle_text(message): \n" \
                     "      if message.text.strip() == '–∫–æ–¥': \n" \
                     "          answer = 'text' \n"\
                     "          bot.send_message(CHANNEL_NAME, answer) \n" \
                     "else: \n" \
                     "      bot.send_message(CHANNEL_NAME, message.text)"
            # –û—Ç—Å—ã–ª–∞–µ–º —é–∑–µ—Ä—É —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –µ–≥–æ —á–∞—Ç
            bot.send_message(CHANNEL_NAME, answer)
            print([message.from_user.id, message.text])
    elif message.text.strip() == '–ü—Ä–∏–≤–µ—Ç':
            answer =  "–†–µ–±—è—Ç–∞, –ø—Ä–∏–≤–µ—Ç –∏–∑ Open AI"
            # –û—Ç—Å—ã–ª–∞–µ–º —é–∑–µ—Ä—É —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –µ–≥–æ —á–∞—Ç
            bot.send_message(CHANNEL_NAME, answer)
            print([message.from_user.id, message.text])
    else:
            bot.send_message(CHANNEL_NAME, str(message.text))
            print([message.from_user.id, str(message.text)])

@bot.message_handler(content_types=["photo"])
def photo(message):
   idphoto = message.photo[0].file_id
   print([idphoto,message.photo[0].file_id])
   bot.send_photo(message.chat.id, idphoto )








# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
print("–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞")
bot.polling(none_stop=True, interval=0)




"""from block_io import BlockIo
api_key_block_btc = "cae3-e5ba-4e69-2ee9"
api_key_block_ltc = "1a2d-0feb-3608-582f"
api_key_block_doge = "6fef-650a-9bf7-f254"
SECRET_PIN = "mustberandomlygeneratedandunique" #kry2011gm
API_VERSION = 2
block_io_btc = BlockIo(api_key_block_btc, SECRET_PIN, API_VERSION)
block_io_ltc = BlockIo(api_key_block_ltc, SECRET_PIN, API_VERSION)
block_io_doge = BlockIo(api_key_block_doge, SECRET_PIN, API_VERSION)"""
